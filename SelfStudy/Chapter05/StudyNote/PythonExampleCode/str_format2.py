# 表示桁数と文字寄せ
## align と width を指定した場合
## aligh は値の表示幅が width よりも小さい場合、値を指定の方向に寄せるため、必ず width とセットで使う
print('{0:>10}'.format('wings'))

## 文字寄せの時、指定文字で不足桁を埋める場合
## 今回の場合、"*" で埋めているが、無指定の場合は半角空白で埋めることも可能
print('{0:*>10}'.format('wings'))

## "=" 指定で符号の後方を埋めることも可能
## {0:010} と同じ
## この場合の "0" は fill ではなく、定数の 0
print('{0:0=10}'.format(-12345))


# 桁区切り文字
## group_opt を指定した場合
print('{0:,}'.format(9876543210))  # 一般的なカンマ表記。3 桁ごとに数値を区切る。
print('{0:#_x}'.format(0x5f5bce1aa))  # "_" = 2/8/16 進数向けの区切り文字。 4 桁ごとに数値を区切る。10 進数では、3 桁ごとに区切る。


# 有効桁数
## ".prec" 形式で有効桁数を指定可能
## 後方の "type" 型指定によって挙動が変化する
print('{0:.1f}cm'.format(5))  # 浮動小数点 {0:.1f} = 小数点以下の桁数を意味する
print('{0:.4g}'.format(22.567))  # 汎用フォーマット {0:.4g} = 小数点前後の桁数を意味する


# 型変換
## 10 進数値 → 16 進数に変換する
## x/X の違い: 10 ~ 15 (A ~ F) を大文字/小文字 で表記するかどうか
## 定数 "#" を指定した場合でも影響する
print('{0:x}'.format(255))
print('{0:X}'.format(255))

## 小数点数を 100 倍にし、 % を付与する
## 数値の扱いは f 指定と同じであるため、小数点以下を 2 桁で丸める
print('{0:.2%}'.format(0.12345))